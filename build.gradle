buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://releases.jfrog.io/artifactory/oss-releases"
        }
    }
    dependencies {
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '4+')
    }
}

plugins {
    id 'io.github.gradle-nexus.publish-plugin' version '1.0.0'
}

allprojects {
    repositories {
        mavenCentral()
        maven {
            url "https://releases.jfrog.io/artifactory/oss-releases"
        }
    }


    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.artifactory'

    group = 'org.jfrog.artifactory.client'
    version = currentVersion
    status = version.endsWith('-SNAPSHOT') ? 'integration' : 'release'

    project.tasks.withType(Jar).each {
        it.version = currentVersion
    }
}

artifactoryPublish.skip = true

artifactory {
    publish {
        defaults {
            publications 'main'
        }
    }
}

nexusPublishing {
    repositories {
        sonatype()
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'signing'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        implementation('org.apache.httpcomponents:httpclient:4.5.13') {
            exclude group: 'commons-codec', module: 'commons-codec'
        }
        implementation 'commons-codec:commons-codec:1.13'
        implementation 'org.apache.commons:commons-lang3:3.12.0'
        implementation 'com.fasterxml.jackson.core:jackson-core:2.14.1'
        implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.1'
        implementation 'com.fasterxml.jackson.core:jackson-annotations:2.14.1'
        api 'org.jfrog.filespecs:file-specs-java:1.1.1'
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier.set('sources')
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier.set('javadoc')
        from javadoc.destinationDir
    }

    test {
        useTestNG()
        testLogging {
            exceptionFormat "full"
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            minGranularity 0
        }
        ignoreFailures = System.getenv("IGNORE_FAILURES") ? System.getenv("IGNORE_FAILURES").toBoolean() : false
    }

    publishing {
        publications {
            main(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar

                pom.withXml {
                    asNode().with {
                        appendNode('packaging', 'jar')
                        appendNode('name', 'artifactory-java-client')
                        appendNode('description', 'Java client for working with Artifactory')
                        appendNode('url', 'https://github.com/jfrog/artifactory-client-java')
                        appendNode('licenses').with {
                            appendNode('license').with {
                                appendNode('name', 'The Apache Software License, Version 2.0')
                                appendNode('url', 'https://www.apache.org/licenses/LICENSE-2.0')
                            }
                        }
                        appendNode('developers').with {
                            appendNode('developer').with {
                                appendNode('name', 'JFrog')
                                appendNode('email', 'eco-system@jfrog.com')
                            }
                        }
                        appendNode('scm').with {
                            appendNode('connection', 'scm:git:git://github.com/jfrog/artifactory-client-java.git')
                            appendNode('developerConnection', 'scm:git:git@github.com:jfrog/artifactory-client-java.git')
                            appendNode('url', 'https://github.com/jfrog/artifactory-client-java')
                        }
                    }
                }
            }
        }
    }

    signing {
        required { !version.endsWith('-SNAPSHOT') }
        def signingKey = findProperty("signingKey")
        def signingPassword = findProperty("signingPassword")
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.main
    }
}
